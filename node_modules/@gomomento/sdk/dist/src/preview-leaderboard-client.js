"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreviewLeaderboardClient = void 0;
const leaderboard_data_client_1 = require("./internal/leaderboard-data-client");
const leaderboard_1 = require("./internal/leaderboard");
const index_1 = require("./index");
/**
 * PREVIEW Momento Leaderboard Client
 * WARNING: the API for this client is not yet stable and may change without notice.
 * Please contact Momento if you would like to try this preview.
 *
 * Leaderboard methods return a response object unique to each request.
 * The response object is resolved to a type-safe object of one of several
 * sub-types. See the documentation for each response type for details.
 */
class PreviewLeaderboardClient {
    constructor(props) {
        var _a;
        const configuration = (_a = props.configuration) !== null && _a !== void 0 ? _a : getDefaultLeaderboardConfiguration();
        const propsWithConfig = {
            ...props,
            configuration: configuration,
        };
        this.logger = configuration.getLoggerFactory().getLogger(this);
        this.logger.debug('Creating Momento LeaderboardClient');
        this.dataClient = new leaderboard_data_client_1.LeaderboardDataClient(propsWithConfig);
    }
    /**
     * Creates an instance of LeaderboardClient with 32-bit float scores.
     */
    leaderboard(cacheName, leaderboardName) {
        return new leaderboard_1.Leaderboard(this.dataClient, cacheName, leaderboardName);
    }
}
exports.PreviewLeaderboardClient = PreviewLeaderboardClient;
function getDefaultLeaderboardConfiguration() {
    return index_1.LeaderboardConfigurations.Laptop.latest();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlldy1sZWFkZXJib2FyZC1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJldmlldy1sZWFkZXJib2FyZC1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBS0EsZ0ZBQXlFO0FBRXpFLHdEQUFtRDtBQUVuRCxtQ0FBNEU7QUFHNUU7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFhLHdCQUF3QjtJQUluQyxZQUFZLEtBQTZCOztRQUN2QyxNQUFNLGFBQWEsR0FDakIsTUFBQSxLQUFLLENBQUMsYUFBYSxtQ0FBSSxrQ0FBa0MsRUFBRSxDQUFDO1FBQzlELE1BQU0sZUFBZSxHQUFxQztZQUN4RCxHQUFHLEtBQUs7WUFDUixhQUFhLEVBQUUsYUFBYTtTQUM3QixDQUFDO1FBRUYsSUFBSSxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksK0NBQXFCLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVEOztPQUVHO0lBQ0ksV0FBVyxDQUFDLFNBQWlCLEVBQUUsZUFBdUI7UUFDM0QsT0FBTyxJQUFJLHlCQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdEUsQ0FBQztDQUNGO0FBdkJELDREQXVCQztBQUVELFNBQVMsa0NBQWtDO0lBQ3pDLE9BQU8saUNBQXlCLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ25ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBNb21lbnRvTG9nZ2VyLFxuICBJTGVhZGVyYm9hcmRDbGllbnQsXG4gIElMZWFkZXJib2FyZCxcbn0gZnJvbSAnQGdvbW9tZW50by9zZGstY29yZSc7XG5pbXBvcnQge0xlYWRlcmJvYXJkRGF0YUNsaWVudH0gZnJvbSAnLi9pbnRlcm5hbC9sZWFkZXJib2FyZC1kYXRhLWNsaWVudCc7XG5pbXBvcnQge0xlYWRlcmJvYXJkQ2xpZW50UHJvcHN9IGZyb20gJy4vbGVhZGVyYm9hcmQtY2xpZW50LXByb3BzJztcbmltcG9ydCB7TGVhZGVyYm9hcmR9IGZyb20gJy4vaW50ZXJuYWwvbGVhZGVyYm9hcmQnO1xuaW1wb3J0IHtJTGVhZGVyYm9hcmREYXRhQ2xpZW50fSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlL2Rpc3Qvc3JjL2ludGVybmFsL2NsaWVudHMvbGVhZGVyYm9hcmQvSUxlYWRlcmJvYXJkRGF0YUNsaWVudCc7XG5pbXBvcnQge0xlYWRlcmJvYXJkQ29uZmlndXJhdGlvbiwgTGVhZGVyYm9hcmRDb25maWd1cmF0aW9uc30gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQge0xlYWRlcmJvYXJkQ2xpZW50UHJvcHNXaXRoQ29uZmlnfSBmcm9tICcuL2ludGVybmFsL2xlYWRlcmJvYXJkLWNsaWVudC1wcm9wcy13aXRoLWNvbmZpZyc7XG5cbi8qKlxuICogUFJFVklFVyBNb21lbnRvIExlYWRlcmJvYXJkIENsaWVudFxuICogV0FSTklORzogdGhlIEFQSSBmb3IgdGhpcyBjbGllbnQgaXMgbm90IHlldCBzdGFibGUgYW5kIG1heSBjaGFuZ2Ugd2l0aG91dCBub3RpY2UuXG4gKiBQbGVhc2UgY29udGFjdCBNb21lbnRvIGlmIHlvdSB3b3VsZCBsaWtlIHRvIHRyeSB0aGlzIHByZXZpZXcuXG4gKlxuICogTGVhZGVyYm9hcmQgbWV0aG9kcyByZXR1cm4gYSByZXNwb25zZSBvYmplY3QgdW5pcXVlIHRvIGVhY2ggcmVxdWVzdC5cbiAqIFRoZSByZXNwb25zZSBvYmplY3QgaXMgcmVzb2x2ZWQgdG8gYSB0eXBlLXNhZmUgb2JqZWN0IG9mIG9uZSBvZiBzZXZlcmFsXG4gKiBzdWItdHlwZXMuIFNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgZWFjaCByZXNwb25zZSB0eXBlIGZvciBkZXRhaWxzLlxuICovXG5leHBvcnQgY2xhc3MgUHJldmlld0xlYWRlcmJvYXJkQ2xpZW50IGltcGxlbWVudHMgSUxlYWRlcmJvYXJkQ2xpZW50IHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGxvZ2dlcjogTW9tZW50b0xvZ2dlcjtcbiAgcHJpdmF0ZSBkYXRhQ2xpZW50OiBJTGVhZGVyYm9hcmREYXRhQ2xpZW50O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBMZWFkZXJib2FyZENsaWVudFByb3BzKSB7XG4gICAgY29uc3QgY29uZmlndXJhdGlvbiA9XG4gICAgICBwcm9wcy5jb25maWd1cmF0aW9uID8/IGdldERlZmF1bHRMZWFkZXJib2FyZENvbmZpZ3VyYXRpb24oKTtcbiAgICBjb25zdCBwcm9wc1dpdGhDb25maWc6IExlYWRlcmJvYXJkQ2xpZW50UHJvcHNXaXRoQ29uZmlnID0ge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICBjb25maWd1cmF0aW9uOiBjb25maWd1cmF0aW9uLFxuICAgIH07XG5cbiAgICB0aGlzLmxvZ2dlciA9IGNvbmZpZ3VyYXRpb24uZ2V0TG9nZ2VyRmFjdG9yeSgpLmdldExvZ2dlcih0aGlzKTtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZygnQ3JlYXRpbmcgTW9tZW50byBMZWFkZXJib2FyZENsaWVudCcpO1xuICAgIHRoaXMuZGF0YUNsaWVudCA9IG5ldyBMZWFkZXJib2FyZERhdGFDbGllbnQocHJvcHNXaXRoQ29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIExlYWRlcmJvYXJkQ2xpZW50IHdpdGggMzItYml0IGZsb2F0IHNjb3Jlcy5cbiAgICovXG4gIHB1YmxpYyBsZWFkZXJib2FyZChjYWNoZU5hbWU6IHN0cmluZywgbGVhZGVyYm9hcmROYW1lOiBzdHJpbmcpOiBJTGVhZGVyYm9hcmQge1xuICAgIHJldHVybiBuZXcgTGVhZGVyYm9hcmQodGhpcy5kYXRhQ2xpZW50LCBjYWNoZU5hbWUsIGxlYWRlcmJvYXJkTmFtZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdExlYWRlcmJvYXJkQ29uZmlndXJhdGlvbigpOiBMZWFkZXJib2FyZENvbmZpZ3VyYXRpb24ge1xuICByZXR1cm4gTGVhZGVyYm9hcmRDb25maWd1cmF0aW9ucy5MYXB0b3AubGF0ZXN0KCk7XG59XG4iXX0=