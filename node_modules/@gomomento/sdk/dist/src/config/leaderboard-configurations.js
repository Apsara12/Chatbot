"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Laptop = void 0;
const leaderboard_configuration_1 = require("./leaderboard-configuration");
const transport_1 = require("./transport");
const default_momento_logger_1 = require("./logging/default-momento-logger");
// 4 minutes.  We want to remain comfortably underneath the idle timeout for AWS NLB, which is 350s.
const defaultMaxIdleMillis = 4 * 60 * 1000;
const defaultMaxSessionMemoryMb = 256;
const defaultLoggerFactory = new default_momento_logger_1.DefaultMomentoLoggerFactory();
/**
 * Laptop config provides defaults suitable for a medium-to-high-latency dev environment.
 * @export
 * @class Laptop
 */
class Laptop extends leaderboard_configuration_1.LeaderboardClientConfiguration {
    /**
     * Provides the latest recommended configuration for a laptop development environment.  NOTE: this configuration may
     * change in future releases to take advantage of improvements we identify for default configurations.
     * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]
     * @returns {LeaderboardConfiguration}
     */
    static latest(loggerFactory = defaultLoggerFactory) {
        return Laptop.v1(loggerFactory);
    }
    /**
     * Provides v1 recommended configuration for a laptop development environment.  This configuration is guaranteed not
     * to change in future releases of the Momento web SDK.
     * @param {MomentoLoggerFactory} [loggerFactory=defaultLoggerFactory]
     * @returns {LeaderboardConfiguration}
     */
    static v1(loggerFactory = defaultLoggerFactory) {
        const deadlineMillis = 5000;
        const grpcConfig = new transport_1.StaticGrpcConfiguration({
            deadlineMillis: deadlineMillis,
            maxSessionMemoryMb: defaultMaxSessionMemoryMb,
        });
        const transportStrategy = new transport_1.StaticTransportStrategy({
            grpcConfiguration: grpcConfig,
            maxIdleMillis: defaultMaxIdleMillis,
        });
        return new Laptop({
            loggerFactory: loggerFactory,
            transportStrategy: transportStrategy,
            throwOnErrors: false,
        });
    }
}
exports.Laptop = Laptop;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZGVyYm9hcmQtY29uZmlndXJhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29uZmlnL2xlYWRlcmJvYXJkLWNvbmZpZ3VyYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJFQUdxQztBQUdyQywyQ0FLcUI7QUFDckIsNkVBQTZFO0FBRTdFLG9HQUFvRztBQUNwRyxNQUFNLG9CQUFvQixHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSyxDQUFDO0FBQzVDLE1BQU0seUJBQXlCLEdBQUcsR0FBRyxDQUFDO0FBQ3RDLE1BQU0sb0JBQW9CLEdBQ3hCLElBQUksb0RBQTJCLEVBQUUsQ0FBQztBQUVwQzs7OztHQUlHO0FBQ0gsTUFBYSxNQUFPLFNBQVEsMERBQThCO0lBQ3hEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FDWCxnQkFBc0Msb0JBQW9CO1FBRTFELE9BQU8sTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsRUFBRSxDQUNQLGdCQUFzQyxvQkFBb0I7UUFFMUQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzVCLE1BQU0sVUFBVSxHQUFzQixJQUFJLG1DQUF1QixDQUFDO1lBQ2hFLGNBQWMsRUFBRSxjQUFjO1lBQzlCLGtCQUFrQixFQUFFLHlCQUF5QjtTQUM5QyxDQUFDLENBQUM7UUFDSCxNQUFNLGlCQUFpQixHQUFzQixJQUFJLG1DQUF1QixDQUFDO1lBQ3ZFLGlCQUFpQixFQUFFLFVBQVU7WUFDN0IsYUFBYSxFQUFFLG9CQUFvQjtTQUNwQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksTUFBTSxDQUFDO1lBQ2hCLGFBQWEsRUFBRSxhQUFhO1lBQzVCLGlCQUFpQixFQUFFLGlCQUFpQjtZQUNwQyxhQUFhLEVBQUUsS0FBSztTQUNyQixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFyQ0Qsd0JBcUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTGVhZGVyYm9hcmRDbGllbnRDb25maWd1cmF0aW9uLFxuICBMZWFkZXJib2FyZENvbmZpZ3VyYXRpb24sXG59IGZyb20gJy4vbGVhZGVyYm9hcmQtY29uZmlndXJhdGlvbic7XG5pbXBvcnQge01vbWVudG9Mb2dnZXJGYWN0b3J5fSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlJztcblxuaW1wb3J0IHtcbiAgR3JwY0NvbmZpZ3VyYXRpb24sXG4gIFN0YXRpY0dycGNDb25maWd1cmF0aW9uLFxuICBTdGF0aWNUcmFuc3BvcnRTdHJhdGVneSxcbiAgVHJhbnNwb3J0U3RyYXRlZ3ksXG59IGZyb20gJy4vdHJhbnNwb3J0JztcbmltcG9ydCB7RGVmYXVsdE1vbWVudG9Mb2dnZXJGYWN0b3J5fSBmcm9tICcuL2xvZ2dpbmcvZGVmYXVsdC1tb21lbnRvLWxvZ2dlcic7XG5cbi8vIDQgbWludXRlcy4gIFdlIHdhbnQgdG8gcmVtYWluIGNvbWZvcnRhYmx5IHVuZGVybmVhdGggdGhlIGlkbGUgdGltZW91dCBmb3IgQVdTIE5MQiwgd2hpY2ggaXMgMzUwcy5cbmNvbnN0IGRlZmF1bHRNYXhJZGxlTWlsbGlzID0gNCAqIDYwICogMV8wMDA7XG5jb25zdCBkZWZhdWx0TWF4U2Vzc2lvbk1lbW9yeU1iID0gMjU2O1xuY29uc3QgZGVmYXVsdExvZ2dlckZhY3Rvcnk6IE1vbWVudG9Mb2dnZXJGYWN0b3J5ID1cbiAgbmV3IERlZmF1bHRNb21lbnRvTG9nZ2VyRmFjdG9yeSgpO1xuXG4vKipcbiAqIExhcHRvcCBjb25maWcgcHJvdmlkZXMgZGVmYXVsdHMgc3VpdGFibGUgZm9yIGEgbWVkaXVtLXRvLWhpZ2gtbGF0ZW5jeSBkZXYgZW52aXJvbm1lbnQuXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgTGFwdG9wXG4gKi9cbmV4cG9ydCBjbGFzcyBMYXB0b3AgZXh0ZW5kcyBMZWFkZXJib2FyZENsaWVudENvbmZpZ3VyYXRpb24ge1xuICAvKipcbiAgICogUHJvdmlkZXMgdGhlIGxhdGVzdCByZWNvbW1lbmRlZCBjb25maWd1cmF0aW9uIGZvciBhIGxhcHRvcCBkZXZlbG9wbWVudCBlbnZpcm9ubWVudC4gIE5PVEU6IHRoaXMgY29uZmlndXJhdGlvbiBtYXlcbiAgICogY2hhbmdlIGluIGZ1dHVyZSByZWxlYXNlcyB0byB0YWtlIGFkdmFudGFnZSBvZiBpbXByb3ZlbWVudHMgd2UgaWRlbnRpZnkgZm9yIGRlZmF1bHQgY29uZmlndXJhdGlvbnMuXG4gICAqIEBwYXJhbSB7TW9tZW50b0xvZ2dlckZhY3Rvcnl9IFtsb2dnZXJGYWN0b3J5PWRlZmF1bHRMb2dnZXJGYWN0b3J5XVxuICAgKiBAcmV0dXJucyB7TGVhZGVyYm9hcmRDb25maWd1cmF0aW9ufVxuICAgKi9cbiAgc3RhdGljIGxhdGVzdChcbiAgICBsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeSA9IGRlZmF1bHRMb2dnZXJGYWN0b3J5XG4gICk6IExlYWRlcmJvYXJkQ29uZmlndXJhdGlvbiB7XG4gICAgcmV0dXJuIExhcHRvcC52MShsb2dnZXJGYWN0b3J5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyB2MSByZWNvbW1lbmRlZCBjb25maWd1cmF0aW9uIGZvciBhIGxhcHRvcCBkZXZlbG9wbWVudCBlbnZpcm9ubWVudC4gIFRoaXMgY29uZmlndXJhdGlvbiBpcyBndWFyYW50ZWVkIG5vdFxuICAgKiB0byBjaGFuZ2UgaW4gZnV0dXJlIHJlbGVhc2VzIG9mIHRoZSBNb21lbnRvIHdlYiBTREsuXG4gICAqIEBwYXJhbSB7TW9tZW50b0xvZ2dlckZhY3Rvcnl9IFtsb2dnZXJGYWN0b3J5PWRlZmF1bHRMb2dnZXJGYWN0b3J5XVxuICAgKiBAcmV0dXJucyB7TGVhZGVyYm9hcmRDb25maWd1cmF0aW9ufVxuICAgKi9cbiAgc3RhdGljIHYxKFxuICAgIGxvZ2dlckZhY3Rvcnk6IE1vbWVudG9Mb2dnZXJGYWN0b3J5ID0gZGVmYXVsdExvZ2dlckZhY3RvcnlcbiAgKTogTGVhZGVyYm9hcmRDb25maWd1cmF0aW9uIHtcbiAgICBjb25zdCBkZWFkbGluZU1pbGxpcyA9IDUwMDA7XG4gICAgY29uc3QgZ3JwY0NvbmZpZzogR3JwY0NvbmZpZ3VyYXRpb24gPSBuZXcgU3RhdGljR3JwY0NvbmZpZ3VyYXRpb24oe1xuICAgICAgZGVhZGxpbmVNaWxsaXM6IGRlYWRsaW5lTWlsbGlzLFxuICAgICAgbWF4U2Vzc2lvbk1lbW9yeU1iOiBkZWZhdWx0TWF4U2Vzc2lvbk1lbW9yeU1iLFxuICAgIH0pO1xuICAgIGNvbnN0IHRyYW5zcG9ydFN0cmF0ZWd5OiBUcmFuc3BvcnRTdHJhdGVneSA9IG5ldyBTdGF0aWNUcmFuc3BvcnRTdHJhdGVneSh7XG4gICAgICBncnBjQ29uZmlndXJhdGlvbjogZ3JwY0NvbmZpZyxcbiAgICAgIG1heElkbGVNaWxsaXM6IGRlZmF1bHRNYXhJZGxlTWlsbGlzLFxuICAgIH0pO1xuICAgIHJldHVybiBuZXcgTGFwdG9wKHtcbiAgICAgIGxvZ2dlckZhY3Rvcnk6IGxvZ2dlckZhY3RvcnksXG4gICAgICB0cmFuc3BvcnRTdHJhdGVneTogdHJhbnNwb3J0U3RyYXRlZ3ksXG4gICAgICB0aHJvd09uRXJyb3JzOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxufVxuIl19