"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LeaderboardClientConfiguration = void 0;
class LeaderboardClientConfiguration {
    constructor(props) {
        this.loggerFactory = props.loggerFactory;
        this.transportStrategy = props.transportStrategy;
        this.throwOnErrors = props.throwOnErrors;
    }
    getLoggerFactory() {
        return this.loggerFactory;
    }
    getTransportStrategy() {
        return this.transportStrategy;
    }
    withClientTimeoutMillis(clientTimeoutMillis) {
        return new LeaderboardClientConfiguration({
            loggerFactory: this.loggerFactory,
            transportStrategy: this.transportStrategy.withClientTimeoutMillis(clientTimeoutMillis),
            throwOnErrors: this.throwOnErrors,
        });
    }
    withTransportStrategy(transportStrategy) {
        return new LeaderboardClientConfiguration({
            loggerFactory: this.loggerFactory,
            transportStrategy: transportStrategy,
            throwOnErrors: this.throwOnErrors,
        });
    }
    getThrowOnErrors() {
        return this.throwOnErrors;
    }
    withThrowOnErrors(throwOnErrors) {
        return new LeaderboardClientConfiguration({
            loggerFactory: this.loggerFactory,
            transportStrategy: this.transportStrategy,
            throwOnErrors: throwOnErrors,
        });
    }
}
exports.LeaderboardClientConfiguration = LeaderboardClientConfiguration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZGVyYm9hcmQtY29uZmlndXJhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb25maWcvbGVhZGVyYm9hcmQtY29uZmlndXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUE4REEsTUFBYSw4QkFBOEI7SUFPekMsWUFBWSxLQUFvQztRQUM5QyxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7UUFDekMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQztRQUNqRCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7SUFDM0MsQ0FBQztJQUVELGdCQUFnQjtRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hDLENBQUM7SUFFRCx1QkFBdUIsQ0FDckIsbUJBQTJCO1FBRTNCLE9BQU8sSUFBSSw4QkFBOEIsQ0FBQztZQUN4QyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDakMsaUJBQWlCLEVBQ2YsSUFBSSxDQUFDLGlCQUFpQixDQUFDLHVCQUF1QixDQUFDLG1CQUFtQixDQUFDO1lBQ3JFLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYTtTQUNsQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQscUJBQXFCLENBQ25CLGlCQUFvQztRQUVwQyxPQUFPLElBQUksOEJBQThCLENBQUM7WUFDeEMsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2pDLGlCQUFpQixFQUFFLGlCQUFpQjtZQUNwQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7U0FDbEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRUQsaUJBQWlCLENBQUMsYUFBc0I7UUFDdEMsT0FBTyxJQUFJLDhCQUE4QixDQUFDO1lBQ3hDLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYTtZQUNqQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCO1lBQ3pDLGFBQWEsRUFBRSxhQUFhO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQXJERCx3RUFxREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01vbWVudG9Mb2dnZXJGYWN0b3J5fSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlJztcbmltcG9ydCB7VHJhbnNwb3J0U3RyYXRlZ3l9IGZyb20gJy4vdHJhbnNwb3J0JztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIE1vbWVudG8gTGVhZGVyYm9hcmRDbGllbnRcbiAqXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIExlYWRlcmJvYXJkQ29uZmlndXJhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIExlYWRlcmJvYXJkQ29uZmlndXJhdGlvbiB7XG4gIC8qKlxuICAgKiBAcmV0dXJucyB7TW9tZW50b0xvZ2dlckZhY3Rvcnl9IHRoZSBjdXJyZW50IGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgbG9nZ2luZyB2ZXJib3NpdHkgYW5kIGZvcm1hdFxuICAgKi9cbiAgZ2V0TG9nZ2VyRmFjdG9yeSgpOiBNb21lbnRvTG9nZ2VyRmFjdG9yeTtcblxuICAvKipcbiAgICogQHJldHVybnMge1RyYW5zcG9ydFN0cmF0ZWd5fSB0aGUgY3VycmVudCBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHdpcmUgaW50ZXJhY3Rpb25zIHdpdGggdGhlIE1vbWVudG8gc2VydmljZVxuICAgKi9cbiAgZ2V0VHJhbnNwb3J0U3RyYXRlZ3koKTogVHJhbnNwb3J0U3RyYXRlZ3k7XG5cbiAgLyoqXG4gICAqIENvcHkgY29uc3RydWN0b3IgZm9yIG92ZXJyaWRpbmcgVHJhbnNwb3J0U3RyYXRlZ3lcbiAgICogQHBhcmFtIHtUcmFuc3BvcnRTdHJhdGVneX0gdHJhbnNwb3J0U3RyYXRlZ3lcbiAgICogQHJldHVybnMge0NvbmZpZ3VyYXRpb259IGEgbmV3IENvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBUcmFuc3BvcnRTdHJhdGVneVxuICAgKi9cbiAgd2l0aFRyYW5zcG9ydFN0cmF0ZWd5KFxuICAgIHRyYW5zcG9ydFN0cmF0ZWd5OiBUcmFuc3BvcnRTdHJhdGVneVxuICApOiBMZWFkZXJib2FyZENvbmZpZ3VyYXRpb247XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBDb25maWd1cmVzIHdoZXRoZXIgdGhlIGNsaWVudCBzaG91bGQgcmV0dXJuIGEgTW9tZW50byBFcnJvciBvYmplY3Qgb3IgdGhyb3cgYW4gZXhjZXB0aW9uIHdoZW4gYW5cbiAgICogZXJyb3Igb2NjdXJzLiBCeSBkZWZhdWx0LCB0aGlzIGlzIHNldCB0byBmYWxzZSwgYW5kIHRoZSBjbGllbnQgd2lsbCByZXR1cm4gYSBNb21lbnRvIEVycm9yIG9iamVjdCBvbiBlcnJvcnMuIFNldCBpdFxuICAgKiB0byB0cnVlIGlmIHlvdSBwcmVmZXIgZm9yIGV4Y2VwdGlvbnMgdG8gYmUgdGhyb3duLlxuICAgKi9cbiAgZ2V0VGhyb3dPbkVycm9ycygpOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDb3B5IGNvbnN0cnVjdG9yIGZvciBjb25maWd1cmluZyB3aGV0aGVyIHRoZSBjbGllbnQgc2hvdWxkIHJldHVybiBhIE1vbWVudG8gRXJyb3Igb2JqZWN0IG9yIHRocm93IGFuIGV4Y2VwdGlvbiB3aGVuIGFuXG4gICAqIGVycm9yIG9jY3Vycy4gQnkgZGVmYXVsdCwgdGhpcyBpcyBzZXQgdG8gZmFsc2UsIGFuZCB0aGUgY2xpZW50IHdpbGwgcmV0dXJuIGEgTW9tZW50byBFcnJvciBvYmplY3Qgb24gZXJyb3JzLiBTZXQgaXRcbiAgICogdG8gdHJ1ZSBpZiB5b3UgcHJlZmVyIGZvciBleGNlcHRpb25zIHRvIGJlIHRocm93bi5cbiAgICogQHBhcmFtIHtib29sZWFufSB0aHJvd09uRXJyb3JzXG4gICAqIEByZXR1cm5zIHtDb25maWd1cmF0aW9ufSBhIG5ldyBDb25maWd1cmF0aW9uIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgdGhyb3dPbkVycm9ycyBzZXR0aW5nXG4gICAqL1xuICB3aXRoVGhyb3dPbkVycm9ycyh0aHJvd09uRXJyb3JzOiBib29sZWFuKTogTGVhZGVyYm9hcmRDb25maWd1cmF0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExlYWRlcmJvYXJkQ29uZmlndXJhdGlvblByb3BzIHtcbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgbG9nZ2luZyB2ZXJib3NpdHkgYW5kIGZvcm1hdFxuICAgKi9cbiAgbG9nZ2VyRmFjdG9yeTogTW9tZW50b0xvZ2dlckZhY3Rvcnk7XG4gIC8qKlxuICAgKiBDb25maWd1cmVzIGxvdy1sZXZlbCBvcHRpb25zIGZvciBuZXR3b3JrIGludGVyYWN0aW9ucyB3aXRoIHRoZSBNb21lbnRvIHNlcnZpY2VcbiAgICovXG4gIHRyYW5zcG9ydFN0cmF0ZWd5OiBUcmFuc3BvcnRTdHJhdGVneTtcblxuICAvKipcbiAgICogQ29uZmlndXJlcyB3aGV0aGVyIHRoZSBjbGllbnQgc2hvdWxkIHJldHVybiBhIE1vbWVudG8gRXJyb3Igb2JqZWN0IG9yIHRocm93IGFuIGV4Y2VwdGlvbiB3aGVuIGFuIGVycm9yIG9jY3Vycy5cbiAgICovXG4gIHRocm93T25FcnJvcnM6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBMZWFkZXJib2FyZENsaWVudENvbmZpZ3VyYXRpb25cbiAgaW1wbGVtZW50cyBMZWFkZXJib2FyZENvbmZpZ3VyYXRpb25cbntcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeTtcbiAgcHJpdmF0ZSByZWFkb25seSB0cmFuc3BvcnRTdHJhdGVneTogVHJhbnNwb3J0U3RyYXRlZ3k7XG4gIHByaXZhdGUgcmVhZG9ubHkgdGhyb3dPbkVycm9yczogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogTGVhZGVyYm9hcmRDb25maWd1cmF0aW9uUHJvcHMpIHtcbiAgICB0aGlzLmxvZ2dlckZhY3RvcnkgPSBwcm9wcy5sb2dnZXJGYWN0b3J5O1xuICAgIHRoaXMudHJhbnNwb3J0U3RyYXRlZ3kgPSBwcm9wcy50cmFuc3BvcnRTdHJhdGVneTtcbiAgICB0aGlzLnRocm93T25FcnJvcnMgPSBwcm9wcy50aHJvd09uRXJyb3JzO1xuICB9XG5cbiAgZ2V0TG9nZ2VyRmFjdG9yeSgpOiBNb21lbnRvTG9nZ2VyRmFjdG9yeSB7XG4gICAgcmV0dXJuIHRoaXMubG9nZ2VyRmFjdG9yeTtcbiAgfVxuXG4gIGdldFRyYW5zcG9ydFN0cmF0ZWd5KCk6IFRyYW5zcG9ydFN0cmF0ZWd5IHtcbiAgICByZXR1cm4gdGhpcy50cmFuc3BvcnRTdHJhdGVneTtcbiAgfVxuXG4gIHdpdGhDbGllbnRUaW1lb3V0TWlsbGlzKFxuICAgIGNsaWVudFRpbWVvdXRNaWxsaXM6IG51bWJlclxuICApOiBMZWFkZXJib2FyZENvbmZpZ3VyYXRpb24ge1xuICAgIHJldHVybiBuZXcgTGVhZGVyYm9hcmRDbGllbnRDb25maWd1cmF0aW9uKHtcbiAgICAgIGxvZ2dlckZhY3Rvcnk6IHRoaXMubG9nZ2VyRmFjdG9yeSxcbiAgICAgIHRyYW5zcG9ydFN0cmF0ZWd5OlxuICAgICAgICB0aGlzLnRyYW5zcG9ydFN0cmF0ZWd5LndpdGhDbGllbnRUaW1lb3V0TWlsbGlzKGNsaWVudFRpbWVvdXRNaWxsaXMpLFxuICAgICAgdGhyb3dPbkVycm9yczogdGhpcy50aHJvd09uRXJyb3JzLFxuICAgIH0pO1xuICB9XG5cbiAgd2l0aFRyYW5zcG9ydFN0cmF0ZWd5KFxuICAgIHRyYW5zcG9ydFN0cmF0ZWd5OiBUcmFuc3BvcnRTdHJhdGVneVxuICApOiBMZWFkZXJib2FyZENvbmZpZ3VyYXRpb24ge1xuICAgIHJldHVybiBuZXcgTGVhZGVyYm9hcmRDbGllbnRDb25maWd1cmF0aW9uKHtcbiAgICAgIGxvZ2dlckZhY3Rvcnk6IHRoaXMubG9nZ2VyRmFjdG9yeSxcbiAgICAgIHRyYW5zcG9ydFN0cmF0ZWd5OiB0cmFuc3BvcnRTdHJhdGVneSxcbiAgICAgIHRocm93T25FcnJvcnM6IHRoaXMudGhyb3dPbkVycm9ycyxcbiAgICB9KTtcbiAgfVxuXG4gIGdldFRocm93T25FcnJvcnMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudGhyb3dPbkVycm9ycztcbiAgfVxuXG4gIHdpdGhUaHJvd09uRXJyb3JzKHRocm93T25FcnJvcnM6IGJvb2xlYW4pOiBMZWFkZXJib2FyZENvbmZpZ3VyYXRpb24ge1xuICAgIHJldHVybiBuZXcgTGVhZGVyYm9hcmRDbGllbnRDb25maWd1cmF0aW9uKHtcbiAgICAgIGxvZ2dlckZhY3Rvcnk6IHRoaXMubG9nZ2VyRmFjdG9yeSxcbiAgICAgIHRyYW5zcG9ydFN0cmF0ZWd5OiB0aGlzLnRyYW5zcG9ydFN0cmF0ZWd5LFxuICAgICAgdGhyb3dPbkVycm9yczogdGhyb3dPbkVycm9ycyxcbiAgICB9KTtcbiAgfVxufVxuIl19